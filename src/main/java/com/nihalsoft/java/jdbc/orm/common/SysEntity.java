
package com.nihalsoft.java.jdbc.orm.common;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.nihalsoft.java.jdbc.orm.annotation.Column;

public class SysEntity {

    private Object id = null;

    @Column(autoGeneratedId = true)
    public Object getId() {
        return id;
    }

    public void setId(Object id) {
        this.id = id;
    }

    @JsonIgnore
    public int getIdAsInt() {
        return Integer.valueOf(id.toString());
    }

    @JsonIgnore
    public long getIdAsLong() {
        return Long.valueOf(id.toString());
    }

    @JsonIgnore
    public String getTableName() {
        return EntityUtil.getTableName(this.getClass());
    }

    @JsonIgnore
    public boolean isNew() {
        return id == null || id.toString().equals("0") || id.equals(Long.valueOf(0));
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        Field[] allFields = getClass().getDeclaredFields();
        for (Field field : allFields) {
            field.setAccessible(true);
            sb.append(field.getName() + " = ");
            try {
                sb.append(field.get(this)).append("\n");
            } catch (Exception e) {
            }

        }
        return sb.toString();
    }

    @Override
    public Object clone() throws CloneNotSupportedException {
        Object clone;
        try {
            Class<?> clazz = this.getClass();
            Constructor<?> constructor = clazz.getConstructor();
            clone = constructor.newInstance();
            Field[] fields = clazz.getDeclaredFields();
            for (Field f : fields) {
                f.setAccessible(true);
                f.set(clone, f.get(this));
            }
        } catch (Exception e) {
            return null;
        }
        return clone;
    }

}